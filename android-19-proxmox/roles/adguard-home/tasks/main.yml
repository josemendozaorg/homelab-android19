---
# AdGuard Home configuration tasks
# Container is provisioned by Terraform, this role only handles configuration
# Assumes AdGuard container already exists and is running

- name: Set container ID from catalog
  set_fact:
    container_id: "{{ adguard_container_id }}"

- name: Wait for AdGuard container to be ready
  shell: pct status {{ container_id }} | grep running
  register: container_ready
  until: container_ready.rc == 0
  retries: 30
  delay: 2

- name: Wait for network connectivity in container
  shell: pct exec {{ container_id }} -- ping -c 1 8.8.8.8
  register: network_test
  until: network_test.rc == 0
  retries: 15
  delay: 2

- name: Check if AdGuard Home binary exists
  shell: pct exec {{ container_id }} -- test -f /opt/AdGuardHome/AdGuardHome
  register: adguard_binary_exists
  failed_when: false
  changed_when: false

- name: Install AdGuard Home if not present
  shell: |
    pct exec {{ container_id }} -- bash -c "
      apt update &&
      apt install -y curl wget sudo &&
      cd /opt &&
      curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh
    "
  register: adguard_installation
  when: adguard_binary_exists.rc != 0

- name: Enable AdGuard Home service (but don't start yet)
  shell: pct exec {{ container_id }} -- systemctl enable AdGuardHome
  when: adguard_binary_exists.rc != 0

- name: Check if AdGuard Home configuration file exists
  shell: pct exec {{ container_id }} -- test -f /opt/AdGuardHome/AdGuardHome.yaml
  register: config_exists
  failed_when: false
  changed_when: false

- name: Stop AdGuard Home service before configuration (if running)
  shell: pct exec {{ container_id }} -- systemctl stop AdGuardHome
  failed_when: false
  changed_when: false

- name: Generate minimal AdGuard Home configuration on Proxmox host
  template:
    src: AdGuardHome-minimal.yaml.j2
    dest: /tmp/adguard_config.yaml

- name: Copy configuration file to container
  shell: |
    pct push {{ container_id }} /tmp/adguard_config.yaml /opt/AdGuardHome/AdGuardHome.yaml
    pct exec {{ container_id }} -- chown root:root /opt/AdGuardHome/AdGuardHome.yaml
    pct exec {{ container_id }} -- chmod 600 /opt/AdGuardHome/AdGuardHome.yaml
    rm -f /tmp/adguard_config.yaml
  register: config_deployed

- name: Start AdGuard Home service with headless configuration
  shell: pct exec {{ container_id }} -- systemctl start AdGuardHome

- name: Wait for AdGuard Home web interface
  wait_for:
    host: "{{ adguard_static_ip }}"
    port: "{{ adguard_web_port }}"
    timeout: 30
  delegate_to: localhost

- name: Wait for AdGuard Home service to be ready
  shell: pct exec {{ container_id }} -- systemctl is-active AdGuardHome
  register: service_status
  until: service_status.stdout == "active"
  retries: 30
  delay: 2

- name: Test AdGuard Home API responsiveness
  uri:
    url: "http://{{ adguard_static_ip }}:{{ adguard_web_port }}/control/status"
    method: GET
    status_code: [200, 401]  # 401 means API is working but needs auth
    follow_redirects: safe
  delegate_to: localhost
  register: api_status
  until: api_status.status in [200, 401]
  retries: 10
  delay: 2
  failed_when: false

- name: Get AdGuard container information
  shell: |
    CONTAINER_ID={{ container_id }}
    echo "Container ID: $CONTAINER_ID"
    echo "Container Status: $(pct status $CONTAINER_ID)"
    echo "Container IP: {{ adguard_static_ip }}"
    echo "Web Interface: http://{{ adguard_static_ip }}:{{ adguard_web_port }}"
    echo "DNS Server: {{ adguard_static_ip }}:{{ adguard_dns_port }}"
  register: container_info
  changed_when: false

- name: Test DNS functionality
  shell: pct exec {{ container_id }} -- nslookup google.com 127.0.0.1
  register: dns_test
  failed_when: false
  changed_when: false

- name: Display AdGuard Home configuration summary
  debug:
    msg:
      - "üéâ AdGuard Home installation and configuration completed!"
      - "{{ container_info.stdout_lines if container_info is defined else ['Container ID: ' + container_id, 'Container Status: running', 'Container IP: ' + adguard_static_ip + ' (static)', 'Web Interface: http://' + adguard_static_ip + ':' + (adguard_web_port | string), 'DNS Server: ' + adguard_static_ip + ':' + (adguard_dns_port | string)] }}"
      - ""
      - "üîê Admin Configuration:"
      - "Username: {{ adguard_admin_username }}"
      - "Password: {{ adguard_admin_password }}"
      - ""
      - "üõ°Ô∏è Headless Configuration Applied:"
      - "‚Ä¢ {{ adguard_filter_lists | length }} security and privacy filter lists configured"
      - "‚Ä¢ {{ adguard_dns_rewrites | length }} homelab DNS rewrites configured"
      - "‚Ä¢ {{ adguard_custom_filtering_rules | length }} custom filtering rules applied"
      - "‚Ä¢ Privacy-focused upstream DNS: {{ adguard_upstream_dns[:2] | join(', ') }}"
      - "‚Ä¢ Security DNS with malware protection: {{ adguard_upstream_dns[2:4] | join(', ') }}"
      - ""
      - "üìã Configuration Status:"
      - "‚úÖ DNS filtering: {{ 'Enabled' if adguard_filtering_enabled else 'Disabled' }}"
      - "‚úÖ Safe browsing: {{ 'Enabled' if adguard_safebrowsing_enabled else 'Disabled' }}"
      - "‚úÖ Query logging: {{ 'Enabled' if adguard_querylog_enabled else 'Disabled' }}"
      - "‚úÖ Statistics: {{ adguard_statistics_interval }} retention"
      - "‚úÖ Cache size: {{ (adguard_cache_size / 1024 / 1024) | int }}MB"
      - "‚úÖ DNS Test: {{ 'PASS' if dns_test.rc == 0 else 'FAIL' }}"
      - ""
      - "üåê Homelab DNS Domains:"
      - "{% for rewrite in adguard_dns_rewrites %}  ‚Ä¢ {{ rewrite.domain }} ‚Üí {{ rewrite.ip }}
{% endfor %}"
      - ""
      - "üìã Next steps:"
      - "1. Update router/DHCP to use {{ adguard_static_ip }} as primary DNS"
      - "2. Test DNS resolution: nslookup proxmox.homelab {{ adguard_static_ip }}"
      - "3. Monitor blocking effectiveness in web interface"
      - "4. Consider enabling parental controls if needed"