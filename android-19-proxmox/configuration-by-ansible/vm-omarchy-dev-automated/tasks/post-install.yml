---
# Post-Installation Configuration for Automated Omarchy VM

- name: Display post-installation verification status
  ansible.builtin.debug:
    msg: |
      🔍 POST-INSTALLATION: Verification and Status Report

      This stage will:
      1. Verify Omarchy installation
      2. Check system services
      3. Test remote desktop configuration
      4. Generate final status report

- name: Final system configuration
  block:
    - name: Ensure NetworkManager is enabled and started
      ansible.builtin.systemd:
        name: NetworkManager
        enabled: yes
        state: started
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ cloud_init_user }}"
        ansible_ssh_pass: "{{ cloud_init_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_become: yes
        ansible_become_pass: "{{ cloud_init_password }}"

    - name: Ensure SSH service is enabled
      ansible.builtin.systemd:
        name: sshd
        enabled: yes
        state: started
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ cloud_init_user }}"
        ansible_ssh_pass: "{{ cloud_init_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_become: yes
        ansible_become_pass: "{{ cloud_init_password }}"

    - name: Configure Chrome Remote Desktop service
      ansible.builtin.systemd:
        name: chrome-remote-desktop
        enabled: yes
        daemon_reload: yes
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ cloud_init_user }}"
        ansible_ssh_pass: "{{ cloud_init_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_become: yes
        ansible_become_pass: "{{ cloud_init_password }}"
      when: omarchy_enable_remote_desktop | default(true)
      ignore_errors: yes

- name: Generate system information report
  block:
    - name: Gather system information
      ansible.builtin.setup:
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ arch_user }}"
        ansible_ssh_pass: "{{ arch_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      register: system_facts

    - name: Check installed packages
      ansible.builtin.shell: |
        pacman -Q | grep -E '(hyprland|git|code|firefox)' || echo "Development packages not found"
      register: installed_packages
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ arch_user }}"
        ansible_ssh_pass: "{{ arch_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Check running services
      ansible.builtin.shell: |
        systemctl --no-pager status NetworkManager sshd chrome-remote-desktop | grep -E '(Active|Loaded)' || true
      register: service_status
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ arch_user }}"
        ansible_ssh_pass: "{{ arch_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Display installation completion report
  ansible.builtin.debug:
    msg: |
      🎉 AUTOMATED OMARCHY VM INSTALLATION COMPLETE!

      ════════════════════════════════════════════════════════════

      📊 SYSTEM INFORMATION:
      - Hostname: {{ system_facts.ansible_facts.ansible_hostname }}
      - OS: {{ system_facts.ansible_facts.ansible_distribution }} {{ system_facts.ansible_facts.ansible_distribution_version }}
      - Kernel: {{ system_facts.ansible_facts.ansible_kernel }}
      - Architecture: {{ system_facts.ansible_facts.ansible_architecture }}
      - Memory: {{ (system_facts.ansible_facts.ansible_memtotal_mb / 1024) | round(1) }}GB
      - CPU Cores: {{ system_facts.ansible_facts.ansible_processor_vcpus }}

      🔗 CONNECTION INFORMATION:
      - SSH Access: ssh {{ arch_user }}@{{ omarchy_vm_automated.ip }}
      - Password: {{ arch_password }} (change immediately!)
      - VM ID: {{ omarchy_vm_automated.id }}
      - VM Name: {{ omarchy_vm_automated.name }}

      📦 INSTALLED PACKAGES:
      {{ installed_packages.stdout }}

      🛠️ SERVICE STATUS:
      {{ service_status.stdout }}

      🎯 NEXT STEPS:
      1. Change default passwords
      2. Set up SSH key authentication
      3. Configure Google Remote Desktop authorization
      4. Install additional development tools as needed

      {% if omarchy_enable_remote_desktop %}
      🖥️ GOOGLE REMOTE DESKTOP SETUP:
      1. Visit: https://remotedesktop.google.com/headless
      2. Download configuration
      3. Run on VM: /opt/google/chrome-remote-desktop/chrome-remote-desktop --setup
      4. Follow authorization steps
      {% endif %}

      ════════════════════════════════════════════════════════════

      ✅ Automated Omarchy development workstation is ready for use!

- name: Save installation details to file
  ansible.builtin.copy:
    content: |
      Omarchy VM Automated Installation Report
      =======================================

      Installation Date: {{ ansible_date_time.iso8601 }}
      VM ID: {{ omarchy_vm_automated.id }}
      VM Name: {{ omarchy_vm_automated.name }}
      IP Address: {{ omarchy_vm_automated.ip }}

      System Information:
      - OS: {{ system_facts.ansible_facts.ansible_distribution }} {{ system_facts.ansible_facts.ansible_distribution_version }}
      - Kernel: {{ system_facts.ansible_facts.ansible_kernel }}
      - Memory: {{ (system_facts.ansible_facts.ansible_memtotal_mb / 1024) | round(1) }}GB
      - CPU Cores: {{ system_facts.ansible_facts.ansible_processor_vcpus }}

      Credentials:
      - Username: {{ arch_user }}
      - Password: {{ arch_password }} (CHANGE IMMEDIATELY)

      SSH Access:
      ssh {{ arch_user }}@{{ omarchy_vm_automated.ip }}

      Remote Desktop: {{ 'Configured' if omarchy_enable_remote_desktop else 'Not configured' }}

      Installation Method: Two-stage automated (archinstall + Omarchy script)

    dest: "/tmp/omarchy-vm-{{ omarchy_vm_automated.id }}-installation-report.txt"
    mode: '0644'
  delegate_to: localhost