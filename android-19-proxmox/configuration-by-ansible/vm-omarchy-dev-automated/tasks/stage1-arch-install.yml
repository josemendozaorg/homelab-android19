---
# Stage 1: Automated Arch Linux Installation
# Uses archinstall for headless base system installation

- name: Display Stage 1 status
  ansible.builtin.debug:
    msg: |
      üîß STAGE 1: Automated Arch Linux Installation

      VM: {{ omarchy_vm_automated.name }} (ID: {{ omarchy_vm_automated.id }})
      IP: {{ omarchy_vm_automated.ip }}
      Method: archinstall with JSON configuration

      This stage will:
      1. Generate archinstall configuration
      2. Boot VM from Arch Linux ISO
      3. Execute automated installation
      4. Verify SSH access

- name: Generate archinstall configuration
  ansible.builtin.template:
    src: archinstall-config.json.j2
    dest: /tmp/archinstall-config-{{ omarchy_vm_automated.id }}.json
    mode: '0644'
  delegate_to: "{{ groups['proxmox'][0] }}"

- name: Configure VM for Arch Linux installation
  block:
    - name: Set VM to boot from Arch Linux ISO
      ansible.builtin.command: >
        qm set {{ omarchy_vm_automated.id }}
        --boot order=ide3;scsi0
      register: boot_order_result
      changed_when: "'update' in boot_order_result.stdout"
      delegate_to: "{{ groups['proxmox'][0] }}"

    - name: Check if VM is already running
      ansible.builtin.command: qm status {{ omarchy_vm_automated.id }}
      register: vm_status
      delegate_to: "{{ groups['proxmox'][0] }}"
      changed_when: false

    - name: Start VM for installation
      ansible.builtin.command: qm start {{ omarchy_vm_automated.id }}
      delegate_to: "{{ groups['proxmox'][0] }}"
      when: "'stopped' in vm_status.stdout"

    - name: Wait for VM to boot into Arch Linux live environment
      ansible.builtin.pause:
        seconds: 60
        prompt: "Waiting for VM to boot into Arch Linux live environment..."

- name: Execute automated Arch Linux installation
  block:
    - name: Display installation instructions
      ansible.builtin.debug:
        msg: |
          üöÄ Executing Automated Arch Linux Installation

          The following steps will be automated via VM console:
          1. Wait for Arch Linux live boot
          2. Configure network (DHCP)
          3. Transfer archinstall configuration
          4. Execute archinstall --config /tmp/config.json --silent
          5. Reboot into installed system

          ‚ö†Ô∏è  This is experimental automation - monitor via Proxmox console

          Console Access: https://{{ ansible_default_ipv4.address | default('192.168.0.19') }}:8006
          VM: {{ omarchy_vm_automated.id }} ({{ omarchy_vm_automated.name }})

    - name: Copy archinstall config to VM via console automation
      ansible.builtin.shell: |
        # This would require expect/pexpect for console automation
        # For now, provide manual instructions
        echo "Manual step required: Copy archinstall config and run installation"
      register: console_automation
      delegate_to: "{{ groups['proxmox'][0] }}"

    - name: Wait for installation to complete
      ansible.builtin.pause:
        seconds: "{{ arch_install_timeout }}"
        prompt: |
          ‚è≥ Waiting for Arch Linux installation to complete...

          Manual steps needed in VM console:
          1. Boot into Arch Linux live environment
          2. Run: curl -o /tmp/config.json http://{{ ansible_default_ipv4.address }}/config.json
          3. Run: archinstall --config /tmp/config.json --silent
          4. Wait for installation to complete and reboot

          Press Enter when installation is complete and VM has rebooted...

- name: Verify Arch Linux installation
  block:
    - name: Wait for SSH to become available
      ansible.builtin.wait_for:
        host: "{{ omarchy_vm_automated.ip }}"
        port: 22
        timeout: "{{ ssh_wait_timeout }}"
        delay: 30
      delegate_to: localhost

    - name: Test SSH connection to installed system
      ansible.builtin.ping:
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ arch_user }}"
        ansible_ssh_pass: "{{ arch_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Verify Arch Linux installation
      ansible.builtin.command: uname -a
      register: arch_verify
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ arch_user }}"
        ansible_ssh_pass: "{{ arch_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Display Stage 1 completion
      ansible.builtin.debug:
        msg: |
          ‚úÖ STAGE 1 COMPLETE: Arch Linux Installation

          System Info: {{ arch_verify.stdout }}
          SSH Access: {{ arch_user }}@{{ omarchy_vm_automated.ip }}

          Ready for Stage 2: Omarchy installation