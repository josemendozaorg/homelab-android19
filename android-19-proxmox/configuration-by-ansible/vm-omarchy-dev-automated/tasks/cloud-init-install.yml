---
# Cloud-init Automated Omarchy Installation
# Single-stage approach using Arch Linux cloud image with cloud-init

- name: Display Cloud-init Installation status
  ansible.builtin.debug:
    msg: |
      ü§ñ CLOUD-INIT: Automated Omarchy Installation

      VM: {{ omarchy_vm_automated.name }} (ID: {{ omarchy_vm_automated.id }})
      IP: {{ omarchy_vm_automated.ip }}
      Method: Cloud-init with Arch Linux QCOW2 image

      This approach will:
      1. Generate cloud-init user-data configuration
      2. Import QCOW2 cloud image as VM disk
      3. Configure VM with cloud-init ISO
      4. Boot VM and let cloud-init handle automation
      5. Verify SSH access and Omarchy installation

- name: Generate cloud-init user-data configuration
  ansible.builtin.template:
    src: cloud-init-user-data.yml.j2
    dest: /tmp/cloud-init-user-data-{{ omarchy_vm_automated.id }}.yml
    mode: '0644'
  delegate_to: "{{ groups['proxmox'][0] }}"

- name: Create cloud-init ISO
  ansible.builtin.shell: |
    # Create temporary directory for cloud-init files
    mkdir -p /tmp/cloud-init-{{ omarchy_vm_automated.id }}

    # Copy user-data
    cp /tmp/cloud-init-user-data-{{ omarchy_vm_automated.id }}.yml /tmp/cloud-init-{{ omarchy_vm_automated.id }}/user-data

    # Create meta-data with instance-id and hostname
    cat > /tmp/cloud-init-{{ omarchy_vm_automated.id }}/meta-data << EOF
    instance-id: omarchy-vm-{{ omarchy_vm_automated.id }}
    local-hostname: {{ cloud_init_hostname }}
    EOF

    # Create network-config for DHCP
    cat > /tmp/cloud-init-{{ omarchy_vm_automated.id }}/network-config << EOF
    version: 2
    ethernets:
      eth0:
        dhcp4: true
    EOF

    # Generate cloud-init ISO
    if command -v genisoimage >/dev/null 2>&1; then
      genisoimage -output {{ cloud_image_storage_path }}/cloud-init-{{ omarchy_vm_automated.id }}.iso \
                  -volid cidata -joliet -rock \
                  /tmp/cloud-init-{{ omarchy_vm_automated.id }}/user-data \
                  /tmp/cloud-init-{{ omarchy_vm_automated.id }}/meta-data \
                  /tmp/cloud-init-{{ omarchy_vm_automated.id }}/network-config
    elif command -v mkisofs >/dev/null 2>&1; then
      mkisofs -output {{ cloud_image_storage_path }}/cloud-init-{{ omarchy_vm_automated.id }}.iso \
              -volid cidata -joliet -rock \
              /tmp/cloud-init-{{ omarchy_vm_automated.id }}/user-data \
              /tmp/cloud-init-{{ omarchy_vm_automated.id }}/meta-data \
              /tmp/cloud-init-{{ omarchy_vm_automated.id }}/network-config
    else
      echo "Error: Neither genisoimage nor mkisofs found"
      exit 1
    fi

    # Clean up temporary directory
    rm -rf /tmp/cloud-init-{{ omarchy_vm_automated.id }}

    echo "Cloud-init ISO created successfully"
  register: cloud_init_iso_result
  delegate_to: "{{ groups['proxmox'][0] }}"

- name: Import QCOW2 cloud image as VM disk
  ansible.builtin.shell: |
    # Import the QCOW2 image as the VM's main disk
    # This will be used by Terraform to configure the VM
    echo "QCOW2 image ready for Terraform import: {{ cloud_image_storage_path }}/{{ arch_cloud_image_name }}"
    echo "Cloud-init ISO ready: {{ cloud_image_storage_path }}/cloud-init-{{ omarchy_vm_automated.id }}.iso"
  register: cloud_image_import_result
  delegate_to: "{{ groups['proxmox'][0] }}"

- name: Display cloud-init preparation completion
  ansible.builtin.debug:
    msg: |
      ‚úÖ Cloud-init Preparation Complete

      Files ready for Terraform:
      - QCOW2 Image: {{ cloud_image_storage_path }}/{{ arch_cloud_image_name }}
      - Cloud-init ISO: {{ cloud_image_storage_path }}/cloud-init-{{ omarchy_vm_automated.id }}.iso

      Next steps:
      1. Terraform will import QCOW2 as VM disk
      2. Terraform will attach cloud-init ISO
      3. VM will boot and cloud-init will run automatically
      4. Omarchy will be installed headlessly

- name: Wait for VM to be provisioned by Terraform
  ansible.builtin.pause:
    seconds: 30
    prompt: |
      ‚è≥ Waiting for Terraform to provision VM...

      Terraform should now:
      1. Create VM with imported QCOW2 disk
      2. Attach cloud-init ISO
      3. Start the VM

      Press Enter when Terraform provisioning is complete...

- name: Wait for cloud-init to complete
  block:
    - name: Wait for SSH to become available
      ansible.builtin.wait_for:
        host: "{{ omarchy_vm_automated.ip }}"
        port: 22
        timeout: "{{ ssh_wait_timeout }}"
        delay: 60  # Wait longer for cloud-init to start
      delegate_to: localhost

    - name: Wait for cloud-init to finish
      ansible.builtin.shell: |
        # Wait for cloud-init to complete all stages
        cloud-init status --wait || echo "Cloud-init completed with status: $?"
      register: cloud_init_status
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ cloud_init_user }}"
        ansible_ssh_pass: "{{ cloud_init_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      timeout: "{{ cloud_init_timeout }}"

    - name: Check cloud-init final status
      ansible.builtin.shell: cloud-init status
      register: cloud_init_final_status
      delegate_to: "{{ omarchy_vm_automated.ip }}"
      vars:
        ansible_user: "{{ cloud_init_user }}"
        ansible_ssh_pass: "{{ cloud_init_password }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Display cloud-init completion status
      ansible.builtin.debug:
        msg: |
          ‚úÖ Cloud-init Installation Complete

          Final Status: {{ cloud_init_final_status.stdout }}

          The VM should now have:
          - Arch Linux base system (from QCOW2 image)
          - Omarchy installed (from cloud-init user-data)
          - SSH access available
          {% if omarchy_enable_remote_desktop -%}
          - Google Remote Desktop configured
          {% endif -%}

          Next: Verify Omarchy installation and system status