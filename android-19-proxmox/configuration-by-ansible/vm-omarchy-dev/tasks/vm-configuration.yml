---
# VM configuration tasks for Omarchy Dev VM (post-Terraform provisioning)

- name: Check if Omarchy VM exists
  ansible.builtin.command: qm status {{ omarchy_vm.id }}
  register: vm_status
  changed_when: false
  failed_when: false

- name: Display VM status
  ansible.builtin.debug:
    msg: >
      {% if vm_status.rc == 0 %}
      VM {{ omarchy_vm.id }} ({{ omarchy_vm.name }}) exists. Status: {{ vm_status.stdout }}
      {% else %}
      VM {{ omarchy_vm.id }} does not exist. Run Terraform provisioning first.
      {% endif %}

- name: Configure VM (only if VM exists)
  when: vm_status.rc == 0
  block:
    - name: Ensure VM is running (if start_on_configure is true)
      ansible.builtin.command: qm start {{ omarchy_vm.id }}
      when:
        - omarchy_vm_start_on_configure | default(false)
        - "'running' not in vm_status.stdout"
      register: vm_start

    - name: Wait for VM to be accessible via network
      ansible.builtin.wait_for:
        host: "{{ omarchy_vm.ip }}"
        port: 22
        timeout: 300
        delay: 10
      when:
        - omarchy_vm_wait_for_network | default(false)
        - vm_start.changed | default(false) or 'running' in vm_status.stdout

    - name: Configure VM hardware optimizations
      block:
        - name: Enable QEMU guest agent
          ansible.builtin.command: qm set {{ omarchy_vm.id }} --agent 1
          register: agent_enable
          changed_when: "'update VM' in agent_enable.stdout"

        - name: Set CPU type to host for better performance
          ansible.builtin.command: qm set {{ omarchy_vm.id }} --cpu host
          register: cpu_set
          changed_when: "'update VM' in cpu_set.stdout"

        - name: Enable balloon device for dynamic memory
          ansible.builtin.command: qm set {{ omarchy_vm.id }} --balloon {{ omarchy_vm_balloon | default(4096) }}
          register: balloon_set
          changed_when: "'update VM' in balloon_set.stdout"

    - name: Install QEMU guest agent in VM (if accessible via qm guest exec)
      ansible.builtin.command: >
        qm guest exec {{ omarchy_vm.id }} -- bash -c "pacman -Sy --noconfirm qemu-guest-agent && systemctl enable --now qemu-ga"
      register: agent_install
      failed_when: false
      changed_when: agent_install.rc == 0
      when: omarchy_vm_install_agent | default(false)

    - name: Create VM backup schedule (optional)
      ansible.builtin.command: >
        pvesh create /cluster/backup --vmid {{ omarchy_vm.id }}
        --schedule "{{ omarchy_vm_backup_schedule | default('sun 02:00') }}"
        --storage {{ omarchy_vm_backup_storage | default('local') }}
        --mode snapshot
        --enabled 1
      register: backup_schedule
      failed_when: false
      changed_when: backup_schedule.rc == 0
      when: omarchy_vm_enable_backup | default(false)

    - name: Display configuration summary
      ansible.builtin.debug:
        msg:
          - "Omarchy VM (ID: {{ omarchy_vm.id }}) configuration complete"
          - "IP Address: {{ omarchy_vm.ip }}"
          - "Manual steps required:"
          - "1. Start VM: qm start {{ omarchy_vm.id }}"
          - "2. Access Proxmox console for {{ omarchy_vm.name }}"
          - "3. Complete Omarchy installation"
          - "4. Install QEMU guest agent: pacman -S qemu-guest-agent"
          - "5. Enable agent: systemctl enable --now qemu-ga"
          - "6. Verify SSH access at {{ omarchy_vm.ip }}"
          - "Documentation: https://omarchy.org/"