---
# Configure a single container
# Variables: container_id, container_ip, container_name

- name: Check if container {{ container_name }} ({{ container_id }}) exists and is running
  shell: pct status {{ container_id }}
  register: container_status
  changed_when: false
  failed_when: false

- name: Ensure container {{ container_name }} is started
  shell: pct start {{ container_id }}
  when:
    - container_status.rc == 0
    - "'stopped' in container_status.stdout"

- name: Wait for container {{ container_name }} to be ready
  wait_for:
    host: "{{ container_ip }}"
    port: 22
    delay: 5
    timeout: 60
    state: started
  delegate_to: localhost
  ignore_errors: yes

- name: Update package list in container {{ container_name }}
  shell: pct exec {{ container_id }} -- apt-get update
  register: apt_update
  retries: 3
  delay: 5
  until: apt_update.rc == 0

- name: Install basic packages in container {{ container_name }}
  shell: |
    pct exec {{ container_id }} -- apt-get install -y \
      curl \
      wget \
      nginx \
      net-tools \
      iputils-ping
  register: package_install
  retries: 3
  delay: 5
  until: package_install.rc == 0

- name: Start nginx service in container {{ container_name }}
  shell: |
    pct exec {{ container_id }} -- systemctl enable nginx
    pct exec {{ container_id }} -- systemctl start nginx
  register: nginx_start

- name: Create custom index page for container {{ container_name }}
  shell: |
    pct exec {{ container_id }} -- bash -c "echo '<h1>{{ container_name }} ({{ container_ip }})</h1><p>Provisioned by Terraform + Configured by Ansible</p>' > /var/www/html/index.html"

- name: Verify nginx is running in container {{ container_name }}
  uri:
    url: "http://{{ container_ip }}"
    method: GET
    status_code: 200
  delegate_to: localhost
  retries: 5
  delay: 2

- name: Display container {{ container_name }} information
  debug:
    msg:
      - "âœ… Container {{ container_name }} ({{ container_id }}) configured successfully!"
      - "Container IP: {{ container_ip }}"
      - "Web Server: http://{{ container_ip }}"
      - "Status: nginx is running"